extern crate cryptoctf;

#[cfg(test)]
mod test {

    use cryptoctf::symmetric::aes_core::*;

    #[test]
    fn test_gf256_mul() {
        let expected = 1;
        assert_eq!(gf256_mul(0x53, 0xca), expected);
    }

    #[test]
    fn test_rot_word() {
        let mut vec_test: [u8; 4] = [0, 1, 2, 3];
        let expected: [u8; 4] = [1, 2, 3, 0];
        rot_word(&mut vec_test);
        assert_eq!(vec_test, expected);
    }


    #[test]
    fn test_shift_rows() {

        let mut inp: [u8; 16] = [
            0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf
        ];

        let expected: [u8; 16] = [
            0x0, 0x5, 0xa, 0xf, 0x4, 0x9, 0xe, 0x3, 0x8, 0xd, 0x2, 0x7, 0xc, 0x1, 0x6, 0xb
        ];

        shift_rows(&mut inp);

        assert_eq!(inp, expected);
    }

    #[test]
    fn test_inv_shift_rows() {

        let expected: [u8; 16] = [
            0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf
        ];

        let mut inp: [u8; 16] = [
            0x0, 0x5, 0xa, 0xf, 0x4, 0x9, 0xe, 0x3, 0x8, 0xd, 0x2, 0x7, 0xc, 0x1, 0x6, 0xb
        ];

        inv_shift_rows(&mut inp);

        assert_eq!(inp, expected);
    }

    //http://www.samiam.org/mix-column.html
    #[test]
    fn test_mix_columns() {

        let mut i: [u8; 16] = [
            219, 19, 83, 69, 1, 1, 1, 1, 198, 198, 198, 198, 45, 38, 49, 76
        ];
        let expected: [u8; 16] = [
            142, 77, 161, 188, 1, 1, 1, 1, 198, 198, 198, 198, 77, 126, 189, 248
        ];
        mix_columns(&mut i);
        assert_eq!(i, expected);
    }

    #[test]
    fn test_inv_mix_columns() {

        let expected: [u8; 16] = [
            219, 19, 83, 69, 1, 1, 1, 1, 198, 198, 198, 198, 45, 38, 49, 76
        ];
        let mut i: [u8; 16] = [
            142, 77, 161, 188, 1, 1, 1, 1, 198, 198, 198, 198, 77, 126, 189, 248
        ];
        inv_mix_columns(&mut i);
        assert_eq!(i, expected);
    }

    #[test]
    fn test_sub_bytes() {

        let mut inp : [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f];

        let expected : [u8; 16] = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76];

        sub_bytes(&mut inp);

        assert_eq!(inp, expected);
    }

    #[test]
    fn test_inv_sub_bytes() {

        let expected: [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,  0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f];

        let mut inp: [u8; 16] = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76];

        inv_sub_bytes(&mut inp);

        assert_eq!(inp, expected);
    }

    #[test]
    fn test_key_expansion() {
        let k = vec![
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f,
            0x3c,
        ];

        let expected = vec![
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f,
            0x3c, 0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c,
            0x76, 0x05, 0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73,
            0x59, 0xf6, 0x7f, 0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44,
            0x6d, 0x7a, 0x88, 0x3b, 0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25,
            0x3b, 0xdb, 0x0b, 0xad, 0x00, 0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2,
            0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc, 0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb,
            0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd, 0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3,
            0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f, 0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba,
            0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f, 0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa,
            0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e, 0xd0, 0x14, 0xf9, 0xa8, 0xc9,
            0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,
        ];

        let out = key_expansion(&k, 4, 10);
        assert_eq!(out, expected);
        println!("Ok");
    }

}
